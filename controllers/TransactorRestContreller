@RestController
@RequestMapping("/api")
public class TransactorRestController {

	private TransactorService transactorService;
	
	@Autowired
	public TransactorRestController(TransactorService theTransactorService) {
		transactorService = theTransactorService;
	}
	
	// expose "/employees" and return list of employees
	@GetMapping("/transactors")
	public List<Transactor> findAll() {
		return transactorService.findAll();
	}

	// add mapping for GET /employees/{employeeId}
	
	@GetMapping("/transactors/{transactorId}")
	public Transactor getTransactor(@PathVariable int transactorId) {
		
		Transactor theTransactor = transactorService.findById(transactorId);
		
		if (theTransactor == null) {
			throw new RuntimeException("Transactor id not found - " + transactorId);
		}
		
		return theTransactor;
	}
	
	// add mapping for POST /employees - add new employee
	
	@PostMapping("/transactors")
	public Transactor addTransactor(@RequestBody Transactor theTransactor) {
		
		// also just in case they pass an id in JSON ... set id to 0
		// this is to force a save of new item ... instead of update
		
		theTransactor.setId(0);
		
		transactorService.save(theTransactor);
		
		return theTransactor;
	}
	
	// add mapping for PUT /employees - update existing employee
	
	@PutMapping("/transactors")
	public Employee updateEmployee(@RequestBody Employee theEmployee) {
		
		transactorService.save(theTransactor);
		
		return theTransactor;
	}
	
	// add mapping for DELETE /employees/{employeeId} - delete employee
	
	@DeleteMapping("/transactors/{transactorId}")
	public String deleteTransactor(@PathVariable int transactorId) {
		
		Transactor tempTransactor = transactorService.findById(transactorId);
		
		// throw exception if null
		
		if (tempTransactor == null) {
			throw new RuntimeException("Transactor id not found - " + transactorId);
		}
		
		transactorService.deleteById(transactorId);
		
		return "Deleted transactor id - " + transactorId;
	}
	
}










